// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/v1/launch/launch.proto

package launch

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LaunchRequest is a scenario launch request.
// Please refer to the webdoc to better understand the chall-manager design.
type LaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge ID to launch. Given for traceability through requests and
	// used for generating the "identity" value (see SDK design).
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	// The source ID i.e. the identifier of the user/team/anything that issued
	// the request. You must make sure to map it to only one kind, e.g. not sending
	// teams and/or users ID at same time, else there will be collisions thus cause
	// the scenario launch to never complete.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The scenario is a base64-encoded zip archive containing the entrypoint to run.
	//
	// Notice this would be executed with the same rights that the chall-manager thus
	// enable RCE: make sure to never expose it. We recommend using a service-mesh with
	// mTLS enabled between the chall-manager replicas and the CTF backends ones.
	//
	// For most of the cases, you don't have to deal with it on your own, but for
	// developers and integrators, refer to the chall-manager code internals if curious
	// on how this payload is handled or how the SDK is binded.
	Scenario string `protobuf:"bytes,3,opt,name=scenario,proto3" json:"scenario,omitempty"`
	// Types that are assignable to Dates:
	//
	//	*LaunchRequest_Timeout
	//	*LaunchRequest_Until
	Dates isLaunchRequest_Dates `protobuf_oneof:"dates"`
}

func (x *LaunchRequest) Reset() {
	*x = LaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_launch_launch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest) ProtoMessage() {}

func (x *LaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_launch_launch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest.ProtoReflect.Descriptor instead.
func (*LaunchRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_launch_launch_proto_rawDescGZIP(), []int{0}
}

func (x *LaunchRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *LaunchRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *LaunchRequest) GetScenario() string {
	if x != nil {
		return x.Scenario
	}
	return ""
}

func (m *LaunchRequest) GetDates() isLaunchRequest_Dates {
	if m != nil {
		return m.Dates
	}
	return nil
}

func (x *LaunchRequest) GetTimeout() *durationpb.Duration {
	if x, ok := x.GetDates().(*LaunchRequest_Timeout); ok {
		return x.Timeout
	}
	return nil
}

func (x *LaunchRequest) GetUntil() *timestamppb.Timestamp {
	if x, ok := x.GetDates().(*LaunchRequest_Until); ok {
		return x.Until
	}
	return nil
}

type isLaunchRequest_Dates interface {
	isLaunchRequest_Dates()
}

type LaunchRequest_Timeout struct {
	// The timeout after which the janitor will have permission to delete the
	// resources.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3,oneof"`
}

type LaunchRequest_Until struct {
	// The date after which the janitor will have permission to delete the
	// resources.
	Until *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=until,proto3,oneof"`
}

func (*LaunchRequest_Timeout) isLaunchRequest_Dates() {}

func (*LaunchRequest_Until) isLaunchRequest_Dates() {}

// LaunchResponse is a scenario launch response.
// Please refer to the webdoc to better understand the chall-manager design.
type LaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection information to the launched scenario.
	//
	// Most of the time, this is a simple example on how to connect hence could be
	// used as is by the player. Please make sure to avoid implicit informations
	// (ports, headers, protocol, etc.) to enable players focus on the actual value
	// of your efforts: the challenge.
	ConnectionInfo string `protobuf:"bytes,1,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`
	// Timestamp the challenge is expected to run until.
	// Due to latencies it is not guaranteed, but could happen at any time.
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	// The flag is a non-mantdatory response specific to the Challenge Scenario on
	// Demand, and is the payload to validate this challenge.
	// It enables variability thus shareflag (does not natively block from sharing
	// writeups or anything similar).
	Flag *string `protobuf:"bytes,3,opt,name=flag,proto3,oneof" json:"flag,omitempty"`
	// The error message, if anything failed.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LaunchResponse) Reset() {
	*x = LaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_launch_launch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchResponse) ProtoMessage() {}

func (x *LaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_launch_launch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchResponse.ProtoReflect.Descriptor instead.
func (*LaunchResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_launch_launch_proto_rawDescGZIP(), []int{1}
}

func (x *LaunchResponse) GetConnectionInfo() string {
	if x != nil {
		return x.ConnectionInfo
	}
	return ""
}

func (x *LaunchResponse) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *LaunchResponse) GetFlag() string {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return ""
}

func (x *LaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// QueryLaunchResponse is a reponse that index a LaunchResponse given the challenge
// and source identifiers to enable listing all running Challenge Scenario on Demand.
type QueryLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge ID to launch. Given for traceability through requests and
	// used for generating the "identity" value (see SDK design).
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	// The source ID i.e. the identifier of the user/team/anything that issued
	// the request. You must make sure to map it to only one kind, e.g. not sending
	// teams and/or users ID at same time, else there will be collisions thus cause
	// the scenario launch to never complete.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The scenario launch response.
	LaunchResponse *LaunchResponse `protobuf:"bytes,3,opt,name=launch_response,json=launchResponse,proto3" json:"launch_response,omitempty"`
}

func (x *QueryLaunchResponse) Reset() {
	*x = QueryLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_launch_launch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLaunchResponse) ProtoMessage() {}

func (x *QueryLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_launch_launch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLaunchResponse.ProtoReflect.Descriptor instead.
func (*QueryLaunchResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_launch_launch_proto_rawDescGZIP(), []int{2}
}

func (x *QueryLaunchResponse) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *QueryLaunchResponse) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *QueryLaunchResponse) GetLaunchResponse() *LaunchResponse {
	if x != nil {
		return x.LaunchResponse
	}
	return nil
}

// RetrieveLaunchRequest is a scenario launch information request.
type RetrieveLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge ID to launch. Given for traceability through requests and
	// used for generating the "identity" value (see SDK design).
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	// The source ID i.e. the identifier of the user/team/anything that issued
	// the request. You must make sure to map it to only one kind, e.g. not sending
	// teams and/or users ID at same time, else there will be collisions thus cause
	// the scenario launch to never complete.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *RetrieveLaunchRequest) Reset() {
	*x = RetrieveLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_launch_launch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveLaunchRequest) ProtoMessage() {}

func (x *RetrieveLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_launch_launch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveLaunchRequest.ProtoReflect.Descriptor instead.
func (*RetrieveLaunchRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_launch_launch_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveLaunchRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *RetrieveLaunchRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type UpdateLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge ID to launch. Given for traceability through requests and
	// used for generating the "identity" value (see SDK design).
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	// The source ID i.e. the identifier of the user/team/anything that issued
	// the request. You must make sure to map it to only one kind, e.g. not sending
	// teams and/or users ID at same time, else there will be collisions thus cause
	// the scenario launch to never complete.
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Types that are assignable to Dates:
	//
	//	*UpdateLaunchRequest_Timeout
	//	*UpdateLaunchRequest_Until
	Dates isUpdateLaunchRequest_Dates `protobuf_oneof:"dates"`
}

func (x *UpdateLaunchRequest) Reset() {
	*x = UpdateLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_launch_launch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLaunchRequest) ProtoMessage() {}

func (x *UpdateLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_launch_launch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLaunchRequest.ProtoReflect.Descriptor instead.
func (*UpdateLaunchRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_launch_launch_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateLaunchRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *UpdateLaunchRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (m *UpdateLaunchRequest) GetDates() isUpdateLaunchRequest_Dates {
	if m != nil {
		return m.Dates
	}
	return nil
}

func (x *UpdateLaunchRequest) GetTimeout() *durationpb.Duration {
	if x, ok := x.GetDates().(*UpdateLaunchRequest_Timeout); ok {
		return x.Timeout
	}
	return nil
}

func (x *UpdateLaunchRequest) GetUntil() *timestamppb.Timestamp {
	if x, ok := x.GetDates().(*UpdateLaunchRequest_Until); ok {
		return x.Until
	}
	return nil
}

type isUpdateLaunchRequest_Dates interface {
	isUpdateLaunchRequest_Dates()
}

type UpdateLaunchRequest_Timeout struct {
	// The timeout after which the janitor will have permission to delete the
	// resources.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3,oneof"`
}

type UpdateLaunchRequest_Until struct {
	// The date after which the janitor will have permission to delete the
	// resources.
	Until *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=until,proto3,oneof"`
}

func (*UpdateLaunchRequest_Timeout) isUpdateLaunchRequest_Dates() {}

func (*UpdateLaunchRequest_Until) isUpdateLaunchRequest_Dates() {}

var File_api_v1_launch_launch_proto protoreflect.FileDescriptor

var file_api_v1_launch_launch_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2f,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x03,
	0x4a, 0x01, 0x31, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x28, 0x7a, 0x69, 0x70, 0x28, 0x2e, 0x29, 0x29, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x42, 0x07, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x4a, 0x2e, 0x22, 0x63, 0x75,
	0x72, 0x6c, 0x20, 0x2d, 0x76, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x74, 0x66, 0x65, 0x72, 0x2e, 0x69, 0x6f, 0x2f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x12, 0x4f, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0x92, 0x41, 0x30, 0x4a, 0x2e, 0x22, 0x43, 0x54, 0x46, 0x45, 0x52, 0x7b, 0xc3, 0x8f, 0x6e, 0xc6,
	0x92, 0x52, 0xc3, 0xa5, 0xc5, 0xa0, 0x37, 0x72, 0xc3, 0x9c, 0xc2, 0xa9, 0xe2, 0x80, 0xa0, 0xc3,
	0xbb, 0x72, 0xc3, 0xa8, 0x20, 0xc3, 0xa3, 0xc2, 0xa7, 0x20, 0xc2, 0xa9, 0xc3, 0x96, 0x64, 0xc3,
	0xa8, 0x7d, 0x22, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x22, 0xb8, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x03, 0x4a, 0x01,
	0x31, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x15, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x03, 0x4a,
	0x01, 0x31, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x31, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x32, 0xad, 0x04, 0x0a,
	0x08, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01,
	0x2a, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x65, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x32, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x5c,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x2e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0xed, 0x02, 0x92,
	0x41, 0xa3, 0x02, 0x12, 0xf9, 0x01, 0x0a, 0x2d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x2d, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x67, 0x52, 0x50, 0x43, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x52, 0x45, 0x53,
	0x54, 0x20, 0x41, 0x50, 0x49, 0x12, 0x36, 0x54, 0x68, 0x65, 0x20, 0x67, 0x52, 0x50, 0x43, 0x2d,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x50, 0x49, 0x76, 0x32, 0x20, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x22, 0x35, 0x0a,
	0x08, 0x43, 0x54, 0x46, 0x65, 0x72, 0x2e, 0x69, 0x6f, 0x12, 0x10, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x63, 0x74, 0x66, 0x65, 0x72, 0x2e, 0x69, 0x6f, 0x1a, 0x17, 0x63, 0x74, 0x66,
	0x65, 0x72, 0x2d, 0x69, 0x6f, 0x40, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x6d, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x51, 0x0a, 0x12, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x3b, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x74, 0x66, 0x65, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2a,
	0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x74, 0x66, 0x65, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x3b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_launch_launch_proto_rawDescOnce sync.Once
	file_api_v1_launch_launch_proto_rawDescData = file_api_v1_launch_launch_proto_rawDesc
)

func file_api_v1_launch_launch_proto_rawDescGZIP() []byte {
	file_api_v1_launch_launch_proto_rawDescOnce.Do(func() {
		file_api_v1_launch_launch_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_launch_launch_proto_rawDescData)
	})
	return file_api_v1_launch_launch_proto_rawDescData
}

var file_api_v1_launch_launch_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_v1_launch_launch_proto_goTypes = []interface{}{
	(*LaunchRequest)(nil),         // 0: api.v1.launch.LaunchRequest
	(*LaunchResponse)(nil),        // 1: api.v1.launch.LaunchResponse
	(*QueryLaunchResponse)(nil),   // 2: api.v1.launch.QueryLaunchResponse
	(*RetrieveLaunchRequest)(nil), // 3: api.v1.launch.RetrieveLaunchRequest
	(*UpdateLaunchRequest)(nil),   // 4: api.v1.launch.UpdateLaunchRequest
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 7: google.protobuf.Empty
}
var file_api_v1_launch_launch_proto_depIdxs = []int32{
	5,  // 0: api.v1.launch.LaunchRequest.timeout:type_name -> google.protobuf.Duration
	6,  // 1: api.v1.launch.LaunchRequest.until:type_name -> google.protobuf.Timestamp
	6,  // 2: api.v1.launch.LaunchResponse.until:type_name -> google.protobuf.Timestamp
	1,  // 3: api.v1.launch.QueryLaunchResponse.launch_response:type_name -> api.v1.launch.LaunchResponse
	5,  // 4: api.v1.launch.UpdateLaunchRequest.timeout:type_name -> google.protobuf.Duration
	6,  // 5: api.v1.launch.UpdateLaunchRequest.until:type_name -> google.protobuf.Timestamp
	0,  // 6: api.v1.launch.Launcher.CreateLaunch:input_type -> api.v1.launch.LaunchRequest
	3,  // 7: api.v1.launch.Launcher.RetrieveLaunch:input_type -> api.v1.launch.RetrieveLaunchRequest
	7,  // 8: api.v1.launch.Launcher.QueryLaunches:input_type -> google.protobuf.Empty
	4,  // 9: api.v1.launch.Launcher.UpdateLaunch:input_type -> api.v1.launch.UpdateLaunchRequest
	0,  // 10: api.v1.launch.Launcher.DeleteLaunch:input_type -> api.v1.launch.LaunchRequest
	1,  // 11: api.v1.launch.Launcher.CreateLaunch:output_type -> api.v1.launch.LaunchResponse
	1,  // 12: api.v1.launch.Launcher.RetrieveLaunch:output_type -> api.v1.launch.LaunchResponse
	2,  // 13: api.v1.launch.Launcher.QueryLaunches:output_type -> api.v1.launch.QueryLaunchResponse
	1,  // 14: api.v1.launch.Launcher.UpdateLaunch:output_type -> api.v1.launch.LaunchResponse
	7,  // 15: api.v1.launch.Launcher.DeleteLaunch:output_type -> google.protobuf.Empty
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_v1_launch_launch_proto_init() }
func file_api_v1_launch_launch_proto_init() {
	if File_api_v1_launch_launch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_launch_launch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_launch_launch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_launch_launch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_launch_launch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_launch_launch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_launch_launch_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LaunchRequest_Timeout)(nil),
		(*LaunchRequest_Until)(nil),
	}
	file_api_v1_launch_launch_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_v1_launch_launch_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UpdateLaunchRequest_Timeout)(nil),
		(*UpdateLaunchRequest_Until)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_launch_launch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_launch_launch_proto_goTypes,
		DependencyIndexes: file_api_v1_launch_launch_proto_depIdxs,
		MessageInfos:      file_api_v1_launch_launch_proto_msgTypes,
	}.Build()
	File_api_v1_launch_launch_proto = out.File
	file_api_v1_launch_launch_proto_rawDesc = nil
	file_api_v1_launch_launch_proto_goTypes = nil
	file_api_v1_launch_launch_proto_depIdxs = nil
}
