// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/launch/launch.proto

package launch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Launcher_CreateLaunch_FullMethodName   = "/api.v1.launch.Launcher/CreateLaunch"
	Launcher_RetrieveLaunch_FullMethodName = "/api.v1.launch.Launcher/RetrieveLaunch"
	Launcher_QueryLaunches_FullMethodName  = "/api.v1.launch.Launcher/QueryLaunches"
	Launcher_UpdateLaunch_FullMethodName   = "/api.v1.launch.Launcher/UpdateLaunch"
	Launcher_DeleteLaunch_FullMethodName   = "/api.v1.launch.Launcher/DeleteLaunch"
)

// LauncherClient is the client API for Launcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LauncherClient interface {
	// CreateLaunch receives the scenario LaunchRequest and returns a LaunchResponse.
	CreateLaunch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
	// RetrieveLaunch retrieves the stack information about an instance.
	// Usefull for re-syncing applications once disconnected due to a network or
	// service failure.
	RetrieveLaunch(ctx context.Context, in *RetrieveLaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
	// QueryLaunches retrieves the stack information about all instances.
	// Usefull for syncing an admin dashboard to the chall-manager instances.
	QueryLaunches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Launcher_QueryLaunchesClient, error)
	// UpdateLaunch udpates an existing challenge scenario on demand.
	UpdateLaunch(ctx context.Context, in *UpdateLaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
	// DeleteLaunch destroy the resources of a challenge scenario.
	DeleteLaunch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type launcherClient struct {
	cc grpc.ClientConnInterface
}

func NewLauncherClient(cc grpc.ClientConnInterface) LauncherClient {
	return &launcherClient{cc}
}

func (c *launcherClient) CreateLaunch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, Launcher_CreateLaunch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launcherClient) RetrieveLaunch(ctx context.Context, in *RetrieveLaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, Launcher_RetrieveLaunch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launcherClient) QueryLaunches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Launcher_QueryLaunchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Launcher_ServiceDesc.Streams[0], Launcher_QueryLaunches_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &launcherQueryLaunchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Launcher_QueryLaunchesClient interface {
	Recv() (*QueryLaunchResponse, error)
	grpc.ClientStream
}

type launcherQueryLaunchesClient struct {
	grpc.ClientStream
}

func (x *launcherQueryLaunchesClient) Recv() (*QueryLaunchResponse, error) {
	m := new(QueryLaunchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *launcherClient) UpdateLaunch(ctx context.Context, in *UpdateLaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, Launcher_UpdateLaunch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launcherClient) DeleteLaunch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Launcher_DeleteLaunch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LauncherServer is the server API for Launcher service.
// All implementations must embed UnimplementedLauncherServer
// for forward compatibility
type LauncherServer interface {
	// CreateLaunch receives the scenario LaunchRequest and returns a LaunchResponse.
	CreateLaunch(context.Context, *LaunchRequest) (*LaunchResponse, error)
	// RetrieveLaunch retrieves the stack information about an instance.
	// Usefull for re-syncing applications once disconnected due to a network or
	// service failure.
	RetrieveLaunch(context.Context, *RetrieveLaunchRequest) (*LaunchResponse, error)
	// QueryLaunches retrieves the stack information about all instances.
	// Usefull for syncing an admin dashboard to the chall-manager instances.
	QueryLaunches(*emptypb.Empty, Launcher_QueryLaunchesServer) error
	// UpdateLaunch udpates an existing challenge scenario on demand.
	UpdateLaunch(context.Context, *UpdateLaunchRequest) (*LaunchResponse, error)
	// DeleteLaunch destroy the resources of a challenge scenario.
	DeleteLaunch(context.Context, *LaunchRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLauncherServer()
}

// UnimplementedLauncherServer must be embedded to have forward compatible implementations.
type UnimplementedLauncherServer struct {
}

func (UnimplementedLauncherServer) CreateLaunch(context.Context, *LaunchRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaunch not implemented")
}
func (UnimplementedLauncherServer) RetrieveLaunch(context.Context, *RetrieveLaunchRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLaunch not implemented")
}
func (UnimplementedLauncherServer) QueryLaunches(*emptypb.Empty, Launcher_QueryLaunchesServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryLaunches not implemented")
}
func (UnimplementedLauncherServer) UpdateLaunch(context.Context, *UpdateLaunchRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLaunch not implemented")
}
func (UnimplementedLauncherServer) DeleteLaunch(context.Context, *LaunchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLaunch not implemented")
}
func (UnimplementedLauncherServer) mustEmbedUnimplementedLauncherServer() {}

// UnsafeLauncherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LauncherServer will
// result in compilation errors.
type UnsafeLauncherServer interface {
	mustEmbedUnimplementedLauncherServer()
}

func RegisterLauncherServer(s grpc.ServiceRegistrar, srv LauncherServer) {
	s.RegisterService(&Launcher_ServiceDesc, srv)
}

func _Launcher_CreateLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).CreateLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Launcher_CreateLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).CreateLaunch(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Launcher_RetrieveLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).RetrieveLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Launcher_RetrieveLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).RetrieveLaunch(ctx, req.(*RetrieveLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Launcher_QueryLaunches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LauncherServer).QueryLaunches(m, &launcherQueryLaunchesServer{stream})
}

type Launcher_QueryLaunchesServer interface {
	Send(*QueryLaunchResponse) error
	grpc.ServerStream
}

type launcherQueryLaunchesServer struct {
	grpc.ServerStream
}

func (x *launcherQueryLaunchesServer) Send(m *QueryLaunchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Launcher_UpdateLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).UpdateLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Launcher_UpdateLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).UpdateLaunch(ctx, req.(*UpdateLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Launcher_DeleteLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).DeleteLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Launcher_DeleteLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).DeleteLaunch(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Launcher_ServiceDesc is the grpc.ServiceDesc for Launcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Launcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.launch.Launcher",
	HandlerType: (*LauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLaunch",
			Handler:    _Launcher_CreateLaunch_Handler,
		},
		{
			MethodName: "RetrieveLaunch",
			Handler:    _Launcher_RetrieveLaunch_Handler,
		},
		{
			MethodName: "UpdateLaunch",
			Handler:    _Launcher_UpdateLaunch_Handler,
		},
		{
			MethodName: "DeleteLaunch",
			Handler:    _Launcher_DeleteLaunch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryLaunches",
			Handler:       _Launcher_QueryLaunches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/launch/launch.proto",
}
